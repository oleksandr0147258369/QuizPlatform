@using Quizzy.Models.Tests
@model RunTestViewModel
@{
    ViewData["Title"] = "Test Run";
    Layout = "_Layout";
    ViewData["HasHeader"] = false;
    ViewData["HasFooter"] = false;
}

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f3f4f6;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 0;
        height: 100vh;
    }

    /*.container {*/
    /*    width: 100%;*/
    /*    max-width: 800px;*/
    /*    padding: 20px;*/
    /*}*/

    .question-card {
        background-color: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .question h2 {
        font-size: 28px;
        color: #111827;
        text-align: center;
    }

    .answers {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 20px;
        width: 100%;
    }

    .answer-option {
        display: flex;
        align-items: center;
        padding: 12px;
        border: 2px solid #d1d5db;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        font-size: 18px;
    }

    .answer-option:hover {
        background-color: #f9fafb;
    }

    .answer-option input {
        margin-right: 12px;
        width: 20px;
        height: 20px;
        accent-color: #10b981;
    }

    .answer-btn {
        padding: 12px 24px;
        background-color: #10b981;
        color: white;
        font-size: 20px;
        cursor: pointer;
        border-radius: 8px;
        border: none;
        margin-top: 20px;
        transition: background-color 0.3s;
    }

    .answer-btn:hover {
        background-color: #059669;
    }

    @@media (max-width: 768px) {
        .answers {
            font-size: 16px;
        }
    }
</style>
<h1 id = "QCount" style = "margin: 50px"></h1>

<div class="container" id="question-container" style = "position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%);">
    <div>Loading...</div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const code = "@Model.Code";
        localStorage.removeItem("currentIndex_" + code);

        var currentIndex = 0;
        const totalCount = @Model.Questions.Count;
        const container = document.getElementById("question-container");


        

        function renderQuestion(data) {
            container.innerHTML = `
        <div class="question-card">
            <div class="question"><h2>${data.text}</h2></div>
            <div class="answers">
                ${data.answers.map(answer => `
                    <label class="answer-option">
                        <input type="${data.hasMultipleCorrect ? 'checkbox' : 'radio'}" name="selectedAnswers" value="${answer.answerId}" />
                        ${answer.text}
                    </label>
                `).join('')}
            </div>
         <button class="answer-btn submit-answer">Continue</button>
            </div>
    `;
        


        document.querySelector(".submit-answer").addEventListener("click", () => {
                const selected = [...container.querySelectorAll('input[name="selectedAnswers"]:checked')];
                if (selected.length === 0) {
                    alert("Виберіть хоча б одну відповідь!");
                    return;
                }

                const answers = selected.map(cb => cb.value);
                fetch("/Run/SubmitAnswer", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        code: code,
                        questionIndex: currentIndex,
                        answerIds: answers,
                        SesId: @Model.SessionId
                    })
                }).then(res => {
                    currentIndex++;
                    localStorage.setItem("currentIndex_" + code, currentIndex);
                    loadQuestion();
                });
            });
            const countElem = document.getElementById("QCount");
            countElem.innerHTML = `${currentIndex + 1} / ${totalCount}`;
        }

        function loadQuestion() {
           
   
            if (currentIndex >= totalCount) {
                fetch("/Run/Result", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ sesId: @Model.SessionId })
                })
                    .then(resultResponse => {
                        if (resultResponse.redirected) {
                            window.location.href = resultResponse.url;
                        } else {
                            window.location.href = "/Run/ShowResult";
                        }
                    });
              
                return;
            }

            // ❗️ Якщо ще є питання — запитуємо
            fetch("/Run/GetQuestion", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ code: code, index: currentIndex })
            }).then(async res => {
                if (!res.ok) {
                    alert("Error");
                    localStorage.removeItem("currentIndex_" + code);
                    window.location.href = "/";
                    return;
                }

                const data = await res.json();
                renderQuestion(data);
            });
        }


        loadQuestion();
    });
</script>